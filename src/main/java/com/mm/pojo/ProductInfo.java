package com.mm.pojo;

import com.mm.myenum.ProductStatusEnum;
import lombok.Data;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

/**
 * generated by Generate POJOs.groovy 
 * <p>Date: Sat Nov 17 23:48:58 CST 2018.</p>
 *
 * @author 
 */
@Entity
@Data
//@DynamicUpdate
@DynamicInsert
@Table ( name ="product_info" )

 /*
 TODO 为什么加上@DynamicUpdate update自动跟新就可以生效?
 加入注释生成的语句:
 update product_info set product_stock=? where product_id=?
 不加入这个注解,则生成的sql如下:
 update product_info set category_type=?, create_time=?, product_description=?, product_icon=?, product_name=?,
  product_price=?, product_status=?, product_stock=?, update_time=? where product_id=?
 故,因为生成的update语句中没有跟新update_time这个字段,
 所以数据库的自动更新就可以起作用.

  */

public class ProductInfo  implements Serializable {


	private static final long serialVersionUID =  9104552715015626057L;

    @Id
   	@Column(name = "product_id" )
    @GeneratedValue(generator = "uuidGenerate")
    @GenericGenerator(name = "uuidGenerate",strategy = "uuid")
	private String productId;

	/**
	 * 商品名称
	 */
   	@Column(name = "product_name" )
	private String productName;

	/**
	 * 单价
	 */
   	@Column(name = "product_price" )
	private BigDecimal productPrice;

	/**
	 * 库存
	 */
   	@Column(name = "product_stock" )
	private Long productStock;

	/**
	 * 描述
	 */
   	@Column(name = "product_description" )
	private String productDescription;

	/**
	 * 小图
	 */
   	@Column(name = "product_icon" )
	private String productIcon;

	/**
	 * 商品状态,0正常1下架
	 */
   	@Column(name = "product_status" )
	private Integer productStatus = ProductStatusEnum.UP.getCode();

	/**
	 * 类目编号
	 */
   	@Column(name = "category_type" )
	private Integer categoryType;

	/**
	 * 创建时间
	 */
   	@Column(name = "create_time" )
	private Date createTime;

	/**
	 * 修改时间
	 */
   	@Column(name = "update_time" )
	private Date updateTime;

}
